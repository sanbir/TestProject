<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dash.AutoMoq.Boost</name>
    </assembly>
    <members>
        <member name="T:Dash.AutoMoq.Boost.AutoMoqBoostCustomization">
            <summary>
            Enables auto-mocking and auto-setup with Moq.
            Members of a mock will be automatically setup to retrieve the return values from a fixture.
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.AutoMoqBoostCustomization.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Dash.AutoMoq.Boost.AutoMoqBoostCustomization"/>.
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.AutoMoqBoostCustomization.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Creates a new instance of <see cref="T:Dash.AutoMoq.Boost.AutoMoqBoostCustomization"/>.
            </summary>
            <param name="relay">A mock relay to be added to <see cref="P:Ploeh.AutoFixture.IFixture.ResidueCollectors"/></param>
        </member>
        <member name="M:Dash.AutoMoq.Boost.AutoMoqBoostCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes a <see cref="T:Ploeh.AutoFixture.IFixture"/> to enable auto-mocking and auto-setup with Moq.
            Members of a mock will be automatically setup to retrieve the return values from <paramref name="fixture"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="P:Dash.AutoMoq.Boost.AutoMoqBoostCustomization.Relay">
            <summary>
            Gets the relay that will be added to <see cref="P:Ploeh.AutoFixture.IFixture.ResidueCollectors"/> when <see cref="M:Dash.AutoMoq.Boost.AutoMoqBoostCustomization.Customize(Ploeh.AutoFixture.IFixture)"/> is invoked.
            </summary>
        </member>
        <member name="T:Dash.AutoMoq.Boost.SealedPropertyInitializer">
            <summary>
            If the type of the object being mocked contains any non-virtual/sealed settable properties,
            this initializer will resolve them from a given context.
            </summary>
        </member>
        <member name="T:Dash.AutoMoq.Boost.IMockInitializer">
            <summary>
            Initializes or sets up mocks created by AutoMoq.
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.IMockInitializer.Setup(Moq.Mock,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Initializes or sets up a mock.
            </summary>
            <param name="mock">The mock to initialize/setup.</param>
            <param name="context">The context of the mock.</param>
        </member>
        <member name="M:Dash.AutoMoq.Boost.SealedPropertyInitializer.Setup(Moq.Mock,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            If the type of the object being mocked contains any non-virtual/sealed settable properties,
            this initializer will resolve them from a given context.
            </summary>
            <param name="mock">The mock object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Dash.AutoMoq.Boost.MockEx">
            <summary>
            Mock extensions.
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockEx.ReturnsUsingFixture``2(Moq.Language.IReturns{``0,``1},Ploeh.AutoFixture.IFixture)">
            <summary>
            Sets up a member to retrieve the return value from a fixture.
            </summary>
            <typeparam name="TMock">The type of the object being mocked.</typeparam>
            <typeparam name="TResult">The return type of the object's member being mocked.</typeparam>
            <param name="setup">The member setup.</param>
            <param name="fixture">The fixture from which the return value will be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockEx.Setup(Moq.Mock,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Sets up a non-void method with a given member access expression, and returns an instance of <see cref="T:Moq.Language.Flow.ISetup`2"/>
            </summary>
            <param name="mock">The mock being set up.</param>
            <param name="memberType">The return type of the member being set up.</param>
            <param name="memberAccessExpression">The expression needed to setup the member.</param>
            <returns>The result of setting up <paramref name="mock"/> with <paramref name="memberAccessExpression"/>.</returns>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockEx.Setup(Moq.Mock,System.Linq.Expressions.Expression)">
            <summary>
            Sets up a void method with a given member access expression, and returns an instance of <see cref="T:Moq.Language.Flow.ISetup`1"/>
            </summary>
            <param name="mock">The mock being set up.</param>
            <param name="memberAccessExpression">The expression needed to setup the member.</param>
            <returns>The result of setting up <paramref name="mock"/> with <paramref name="memberAccessExpression"/>.</returns>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockEx.ReturnsUsingContext(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext,System.Type,System.Type)">
            <summary>
            Configures an instance of <see cref="T:Moq.Language.Flow.ISetup`2"/> to retrieve the return value from <paramref name="context"/>.
            </summary>
            <param name="setup">An instance of <see cref="T:Moq.Language.Flow.ISetup`2"/>.</param>
            <param name="context">The context (fixture) that will be used to retrieve the return value for the mock's member being setup.</param>
            <param name="mockedType">The type of the object being mocked.</param>
            <param name="memberType">The return type of the member of being setup.</param>
            <returns></returns>
        </member>
        <member name="T:Dash.AutoMoq.Boost.VirtualMethodInitializer">
            <summary>
            Sets up a mocked object's methods so that the return values will be retrieved from a fixture,
            instead of being created directly by Moq.
            
            This will setup any virtual methods that are either non-void or have "out" parameters.
            This includes:
             - interface's methods/property getters;
             - class's abstract/virtual/overridden/non-sealed methods/property getters.
            
            Notes:
            - Due to a limitation in Moq, methods with "ref" parameters are skipped.
            - Automatically mocking of generic methods isn't feasible either - we'd have to antecipate any type parameters that this method could be called with. 
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.VirtualMethodInitializer.Setup(Moq.Mock,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Sets up a mocked object's methods so that the return values will be retrieved from a fixture,
            instead of being created directly by Moq.
            </summary>
            <param name="mock">The mock to setup.</param>
            <param name="context">The context of the mock.</param>
        </member>
        <member name="M:Dash.AutoMoq.Boost.VirtualMethodInitializer.MakeMethodInvocationLambda(System.Type,System.Reflection.MethodInfo,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns a lambda expression thats represents an invocation of a mocked type's method.
            E.g., <![CDATA[ x => x.Method(It.IsAny<string>(), It.IsAny<int>()) ]]> 
            </summary>
        </member>
        <member name="T:Dash.AutoMoq.Boost.MockSetup">
            <summary>
            Uses a set of mock initializers to setup a <see cref="T:Moq.Mock`1"/>.
            </summary>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockSetup.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Dash.AutoMoq.Boost.IMockInitializer[])">
            <summary>
            Creates a new instance of <see cref="T:Dash.AutoMoq.Boost.MockSetup"/>.
            </summary>
            <param name="builder">The builder used to create <see cref="T:Moq.Mock`1"/> instances.</param>
            <param name="initializers">The initializers used to setup the mock object.</param>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockSetup.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.Generic.IEnumerable{Dash.AutoMoq.Boost.IMockInitializer})">
            <summary>
            Creates a new instance of <see cref="T:Dash.AutoMoq.Boost.MockSetup"/>.
            </summary>
            <param name="builder">The builder used to create <see cref="T:Moq.Mock`1"/> instances.</param>
            <param name="initializers">The initializers used to setup the mock object.</param>
        </member>
        <member name="M:Dash.AutoMoq.Boost.MockSetup.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Runs a set of initializers to setup a <see cref="T:Moq.Mock`1"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by created by the underlying builder.
            If the specimen is a <see cref="T:Moq.Mock`1"/>, this instance will setup the mock before returning it.
            </returns>
        </member>
        <member name="P:Dash.AutoMoq.Boost.MockSetup.Initializers">
            <summary>
            Gets the mock initializers that will be used to setup a mock.
            </summary>
        </member>
    </members>
</doc>
