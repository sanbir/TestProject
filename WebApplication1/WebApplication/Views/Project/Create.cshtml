@using Shared.Constants.Common
@using Shared.Constants.Employee
@model Shared.Models.Project

@{
    ViewBag.Title = ViewStringConstants.Create;
}

<h2>@ViewStringConstants.Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@ViewStringConstants.ProjectTitle</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerCompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerCompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerCompanyName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Priority, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Priority, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Priority, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>
        

        <h2>@ViewStringConstants.EmployeesTitle</h2>
        <hr />
        @using (Html.BeginForm("Index", "Employee", FormMethod.Get))
        {
            <p class="col-md-9 form-horizontal form-inline form-group">
                @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control" })
                <input type="submit" value=@ViewStringConstants.Search class="btn btn-default" />
            </p>
        }
        <p class="col-md-1 col-md-offset-2">
            @Html.ActionLink(ViewStringConstants.Create, "Create", null, new { @class = "btn btn-success" })
        </p>

        <table class="table">
            <tr>
                <th>
                    @Html.ActionLink(EmployeeProperties.LastNameDisplay,
            "Index",
            new
            {
                sortDirection = ViewBag.CurrentSortDirection,
                sortPropertyName = EmployeeProperties.LastName,
                currentFilter = ViewBag.CurrentFilter
            })
                </th>
                <th>
                    @Html.ActionLink(EmployeeProperties.FirstNameDisplay,
            "Index",
            new
            {
                sortDirection = ViewBag.CurrentSortDirection,
                sortPropertyName = EmployeeProperties.FirstName,
                currentFilter = ViewBag.CurrentFilter
            })
                </th>
                <th>
                    @Html.ActionLink(EmployeeProperties.MiddleNameDisplay,
            "Index",
            new
            {
                sortDirection = ViewBag.CurrentSortDirection,
                sortPropertyName = EmployeeProperties.MiddleName,
                currentFilter = ViewBag.CurrentFilter
            })
                </th>
                <th>
                    @Html.ActionLink(EmployeeProperties.EmailDisplay,
            "Index",
            new
            {
                sortDirection = ViewBag.CurrentSortDirection,
                sortPropertyName = EmployeeProperties.Email,
                currentFilter = ViewBag.CurrentFilter
            })
                </th>
                <th>
                    @Html.ActionLink(EmployeeProperties.ContractorCompanyNameDisplay,
            "Index",
            new
            {
                sortDirection = ViewBag.CurrentSortDirection,
                sortPropertyName = EmployeeProperties.ContractorCompanyName,
                currentFilter = ViewBag.CurrentFilter
            })
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MiddleName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ContractorCompanyName)
                    </td>
                    <td>
                        @Html.ActionLink(ViewStringConstants.Edit, "Edit", new { id = item.Id }) |
                        @Html.ActionLink(ViewStringConstants.Details, "Details", new { id = item.Id }) |
                        @Html.ActionLink(ViewStringConstants.Delete, "Delete", new { id = item.Id })
                    </td>
                </tr>
            }
        </table>

        <br />

        @ViewStringConstants.Page
        @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
        @ViewStringConstants.Of
        @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Index",
    new
    {
        page,
        sortOrder = ViewBag.CurrentSort,
        currentFilter = ViewBag.CurrentFilter
    }))

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value=@ViewStringConstants.Create class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink(ViewStringConstants.Back, "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
